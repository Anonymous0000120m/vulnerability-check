import tensorflow as tf
import numpy as np
import pandas as pd
import logging
import sys

class GeneratorModelLoader:
    def __init__(self, filename):
        self.filename = filename
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)  # 设置日志级别为 INFO

        # 创建日志处理程序并设置格式
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch = logging.StreamHandler(sys.stdout)
        ch.setFormatter(formatter)
        self.logger.addHandler(ch)

    def load_generator_model(self):
        try:
            # 加载生成器模型
            model = tf.keras.models.load_model(self.filename)
            self.logger.info(f"Generator model loaded from {self.filename}")
            return model
        except Exception as e:
            self.logger.error(f"Failed to load generator model: {e}")
            raise e

class DataGenerator:
    def __init__(self, generator_model):
        self.generator_model = generator_model

    def generate_data(self, num_samples):
        # 生成数据
        noise = np.random.randn(num_samples, 100)
        generated_data = self.generator_model.predict(noise)
        return generated_data

class CSVWriter:
    def __init__(self, filename):
        self.filename = filename

    def write_to_csv(self, data):
        # 将数据展平为一维数组
        flattened_data = data.reshape(data.shape[0], -1)

        # 将展平后的数据写入 CSV 文件
        df = pd.DataFrame(flattened_data)
        df.to_csv(self.filename, index=False)


if __name__ == "__main__":
    # 加载生成器模型
    loader = GeneratorModelLoader("generator_model.keras")
    generator_model = loader.load_generator_model()

    # 创建数据生成器
    data_generator = DataGenerator(generator_model)

    # 生成数据
    generated_data = data_generator.generate_data(1000)

    # 将生成的数据写入 CSV 文件
    csv_writer = CSVWriter("generated_data.csv")
    csv_writer.write_to_csv(generated_data)
